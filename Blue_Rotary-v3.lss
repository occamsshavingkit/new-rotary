
Blue_Rotary-v3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000084a  000008de  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000084a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006e  00800102  00800102  000008e0  2**0
                  ALLOC
  3 .stab         0000093c  00000000  00000000  000008e0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000139  00000000  00000000  0000121c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000108  00000000  00000000  00001358  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000d5a  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000445  00000000  00000000  000021ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000052d  00000000  00000000  000025ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00002b2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000003b3  00000000  00000000  00002df8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007f3  00000000  00000000  000031ab  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000399e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 b4 00 	jmp	0x168	; 0x168 <__ctors_end>
   4:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
   8:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
   c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  10:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__vector_4>
  14:	0c 94 9d 01 	jmp	0x33a	; 0x33a <__vector_5>
  18:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  1c:	0c 94 e9 00 	jmp	0x1d2	; 0x1d2 <__vector_7>
  20:	0c 94 2a 01 	jmp	0x254	; 0x254 <__vector_8>
  24:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  28:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  2c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  30:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  34:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  38:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  3c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  40:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_16>
  44:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  48:	0c 94 93 02 	jmp	0x526	; 0x526 <__vector_18>
  4c:	0c 94 bf 02 	jmp	0x57e	; 0x57e <__vector_19>
  50:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  54:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  58:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  5c:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  60:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>
  64:	0c 94 d1 00 	jmp	0x1a2	; 0x1a2 <__bad_interrupt>

00000068 <sine_table>:
  68:	80 83 86 89 8c 8f 92 95 98 9c 9f a2 a5 a8 ab ae     ................
  78:	b0 b3 b6 b9 bc bf c1 c4 c7 c9 cc ce d1 d3 d5 d8     ................
  88:	da dc de e0 e2 e4 e6 e8 ea eb ed ef f0 f2 f3 f4     ................
  98:	f6 f7 f8 f9 fa fb fb fc fd fd fe fe fe ff ff ff     ................
  a8:	ff ff ff ff fe fe fd fd fc fc fb fa f9 f8 f7 f6     ................
  b8:	f5 f4 f2 f1 ef ee ec eb e9 e7 e5 e3 e1 df dd db     ................
  c8:	d9 d7 d4 d2 cf cd ca c8 c5 c3 c0 bd ba b8 b5 b2     ................
  d8:	af ac a9 a6 a3 a0 9d 9a 97 94 91 8e 8a 87 84 81     ................
  e8:	7e 7b 78 75 71 6e 6b 68 65 62 5f 5c 59 56 53 50     ~{xuqnkheb_\YVSP
  f8:	4d 4a 47 45 42 3f 3c 3a 37 35 32 30 2d 2b 28 26     MJGEB?<:7520-+(&
 108:	24 22 20 1e 1c 1a 18 16 14 13 11 10 0e 0d 0b 0a     $" .............
 118:	09 08 07 06 05 04 03 03 02 02 01 01 00 00 00 00     ................
 128:	00 00 00 01 01 01 02 02 03 04 04 05 06 07 08 09     ................
 138:	0b 0c 0d 0f 10 12 14 15 17 19 1b 1d 1f 21 23 25     .............!#%
 148:	27 2a 2c 2e 31 33 36 38 3b 3e 40 43 46 49 4c 4f     '*,.1368;>@CFILO
 158:	51 54 57 5a 5d 60 63 67 6a 6d 70 73 76 79 7c 00     QTWZ]`cgjmpsvy|.

00000168 <__ctors_end>:
 168:	11 24       	eor	r1, r1
 16a:	1f be       	out	0x3f, r1	; 63
 16c:	cf ef       	ldi	r28, 0xFF	; 255
 16e:	d8 e0       	ldi	r29, 0x08	; 8
 170:	de bf       	out	0x3e, r29	; 62
 172:	cd bf       	out	0x3d, r28	; 61

00000174 <__do_copy_data>:
 174:	11 e0       	ldi	r17, 0x01	; 1
 176:	a0 e0       	ldi	r26, 0x00	; 0
 178:	b1 e0       	ldi	r27, 0x01	; 1
 17a:	ea e4       	ldi	r30, 0x4A	; 74
 17c:	f8 e0       	ldi	r31, 0x08	; 8
 17e:	02 c0       	rjmp	.+4      	; 0x184 <__do_copy_data+0x10>
 180:	05 90       	lpm	r0, Z+
 182:	0d 92       	st	X+, r0
 184:	a2 30       	cpi	r26, 0x02	; 2
 186:	b1 07       	cpc	r27, r17
 188:	d9 f7       	brne	.-10     	; 0x180 <__do_copy_data+0xc>

0000018a <__do_clear_bss>:
 18a:	11 e0       	ldi	r17, 0x01	; 1
 18c:	a2 e0       	ldi	r26, 0x02	; 2
 18e:	b1 e0       	ldi	r27, 0x01	; 1
 190:	01 c0       	rjmp	.+2      	; 0x194 <.do_clear_bss_start>

00000192 <.do_clear_bss_loop>:
 192:	1d 92       	st	X+, r1

00000194 <.do_clear_bss_start>:
 194:	a0 37       	cpi	r26, 0x70	; 112
 196:	b1 07       	cpc	r27, r17
 198:	e1 f7       	brne	.-8      	; 0x192 <.do_clear_bss_loop>
 19a:	0e 94 7f 03 	call	0x6fe	; 0x6fe <main>
 19e:	0c 94 23 04 	jmp	0x846	; 0x846 <_exit>

000001a2 <__bad_interrupt>:
 1a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001a6 <__vector_16>:
char rotary_high;
int connected=0;
unsigned int location_350=0, location_440=0;

ISR(TIMER0_OVF_vect)
{
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	8f 93       	push	r24
	cli();
 1b2:	f8 94       	cli
    sleep_disable();
 1b4:	83 b7       	in	r24, 0x33	; 51
 1b6:	8e 7f       	andi	r24, 0xFE	; 254
 1b8:	83 bf       	out	0x33, r24	; 51
    sbi(PORTD,DT1);
 1ba:	5e 9a       	sbi	0x0b, 6	; 11
    cbi(PORTD,DT2);
 1bc:	5f 98       	cbi	0x0b, 7	; 11
	sei();
 1be:	78 94       	sei
    sleep_enable();
 1c0:	83 b7       	in	r24, 0x33	; 51
 1c2:	81 60       	ori	r24, 0x01	; 1
 1c4:	83 bf       	out	0x33, r24	; 51
}
 1c6:	8f 91       	pop	r24
 1c8:	0f 90       	pop	r0
 1ca:	0f be       	out	0x3f, r0	; 63
 1cc:	0f 90       	pop	r0
 1ce:	1f 90       	pop	r1
 1d0:	18 95       	reti

000001d2 <__vector_7>:

ISR(TIMER2_COMPA_vect) // 350 Hz buzz
{
 1d2:	1f 92       	push	r1
 1d4:	0f 92       	push	r0
 1d6:	0f b6       	in	r0, 0x3f	; 63
 1d8:	0f 92       	push	r0
 1da:	11 24       	eor	r1, r1
 1dc:	2f 93       	push	r18
 1de:	3f 93       	push	r19
 1e0:	4f 93       	push	r20
 1e2:	8f 93       	push	r24
 1e4:	9f 93       	push	r25
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
    cli();
 1ea:	f8 94       	cli
    sleep_disable();
 1ec:	83 b7       	in	r24, 0x33	; 51
 1ee:	8e 7f       	andi	r24, 0xFE	; 254
 1f0:	83 bf       	out	0x33, r24	; 51
    cbi(PORTD,DT1);
 1f2:	5e 98       	cbi	0x0b, 6	; 11
    OCR2A = pgm_read_byte(&(sine_table[location_350 >> STEP_SHIFT]));
 1f4:	80 91 04 01 	lds	r24, 0x0104
 1f8:	90 91 05 01 	lds	r25, 0x0105
 1fc:	fc 01       	movw	r30, r24
 1fe:	ee 0f       	add	r30, r30
 200:	ef 2f       	mov	r30, r31
 202:	ee 1f       	adc	r30, r30
 204:	ff 0b       	sbc	r31, r31
 206:	f1 95       	neg	r31
 208:	e8 59       	subi	r30, 0x98	; 152
 20a:	ff 4f       	sbci	r31, 0xFF	; 255
 20c:	e4 91       	lpm	r30, Z
 20e:	e0 93 b3 00 	sts	0x00B3, r30
    location_350 += STEP_350;
 212:	9c 01       	movw	r18, r24
 214:	23 59       	subi	r18, 0x93	; 147
 216:	3e 4f       	sbci	r19, 0xFE	; 254
 218:	30 93 05 01 	sts	0x0105, r19
 21c:	20 93 04 01 	sts	0x0104, r18
    if(location_350 >= (SINE_SAMPLES << STEP_SHIFT)) location_350 -= (SINE_SAMPLES << STEP_SHIFT);
 220:	4f e7       	ldi	r20, 0x7F	; 127
 222:	20 38       	cpi	r18, 0x80	; 128
 224:	34 07       	cpc	r19, r20
 226:	30 f0       	brcs	.+12     	; 0x234 <__vector_7+0x62>
 228:	83 51       	subi	r24, 0x13	; 19
 22a:	9e 47       	sbci	r25, 0x7E	; 126
 22c:	90 93 05 01 	sts	0x0105, r25
 230:	80 93 04 01 	sts	0x0104, r24
    sei();    
 234:	78 94       	sei
    sleep_enable();
 236:	83 b7       	in	r24, 0x33	; 51
 238:	81 60       	ori	r24, 0x01	; 1
 23a:	83 bf       	out	0x33, r24	; 51
}
 23c:	ff 91       	pop	r31
 23e:	ef 91       	pop	r30
 240:	9f 91       	pop	r25
 242:	8f 91       	pop	r24
 244:	4f 91       	pop	r20
 246:	3f 91       	pop	r19
 248:	2f 91       	pop	r18
 24a:	0f 90       	pop	r0
 24c:	0f be       	out	0x3f, r0	; 63
 24e:	0f 90       	pop	r0
 250:	1f 90       	pop	r1
 252:	18 95       	reti

00000254 <__vector_8>:

ISR(TIMER2_COMPB_vect) // 440 Hz buzz
{
 254:	1f 92       	push	r1
 256:	0f 92       	push	r0
 258:	0f b6       	in	r0, 0x3f	; 63
 25a:	0f 92       	push	r0
 25c:	11 24       	eor	r1, r1
 25e:	2f 93       	push	r18
 260:	3f 93       	push	r19
 262:	4f 93       	push	r20
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	ef 93       	push	r30
 26a:	ff 93       	push	r31
    cli();
 26c:	f8 94       	cli
    sleep_disable();
 26e:	83 b7       	in	r24, 0x33	; 51
 270:	8e 7f       	andi	r24, 0xFE	; 254
 272:	83 bf       	out	0x33, r24	; 51
    sbi(PORTD,DT2);
 274:	5f 9a       	sbi	0x0b, 7	; 11
    OCR2B = pgm_read_byte(&(sine_table[location_440 >> STEP_SHIFT]));
 276:	80 91 02 01 	lds	r24, 0x0102
 27a:	90 91 03 01 	lds	r25, 0x0103
 27e:	fc 01       	movw	r30, r24
 280:	ee 0f       	add	r30, r30
 282:	ef 2f       	mov	r30, r31
 284:	ee 1f       	adc	r30, r30
 286:	ff 0b       	sbc	r31, r31
 288:	f1 95       	neg	r31
 28a:	e8 59       	subi	r30, 0x98	; 152
 28c:	ff 4f       	sbci	r31, 0xFF	; 255
 28e:	e4 91       	lpm	r30, Z
 290:	e0 93 b4 00 	sts	0x00B4, r30
    location_440 += STEP_440;
 294:	9c 01       	movw	r18, r24
 296:	25 53       	subi	r18, 0x35	; 53
 298:	3e 4f       	sbci	r19, 0xFE	; 254
 29a:	30 93 03 01 	sts	0x0103, r19
 29e:	20 93 02 01 	sts	0x0102, r18
    if(location_440 >= (SINE_SAMPLES << STEP_SHIFT)) location_440 -= (SINE_SAMPLES << STEP_SHIFT);
 2a2:	4f e7       	ldi	r20, 0x7F	; 127
 2a4:	20 38       	cpi	r18, 0x80	; 128
 2a6:	34 07       	cpc	r19, r20
 2a8:	30 f0       	brcs	.+12     	; 0x2b6 <__vector_8+0x62>
 2aa:	85 5b       	subi	r24, 0xB5	; 181
 2ac:	9d 47       	sbci	r25, 0x7D	; 125
 2ae:	90 93 03 01 	sts	0x0103, r25
 2b2:	80 93 02 01 	sts	0x0102, r24
    sei();
 2b6:	78 94       	sei
    sleep_enable();
 2b8:	83 b7       	in	r24, 0x33	; 51
 2ba:	81 60       	ori	r24, 0x01	; 1
 2bc:	83 bf       	out	0x33, r24	; 51
}
 2be:	ff 91       	pop	r31
 2c0:	ef 91       	pop	r30
 2c2:	9f 91       	pop	r25
 2c4:	8f 91       	pop	r24
 2c6:	4f 91       	pop	r20
 2c8:	3f 91       	pop	r19
 2ca:	2f 91       	pop	r18
 2cc:	0f 90       	pop	r0
 2ce:	0f be       	out	0x3f, r0	; 63
 2d0:	0f 90       	pop	r0
 2d2:	1f 90       	pop	r1
 2d4:	18 95       	reti

000002d6 <__vector_4>:

ISR(PCINT1_vect) //HOOK
{
 2d6:	1f 92       	push	r1
 2d8:	0f 92       	push	r0
 2da:	0f b6       	in	r0, 0x3f	; 63
 2dc:	0f 92       	push	r0
 2de:	11 24       	eor	r1, r1
 2e0:	8f 93       	push	r24
 2e2:	9f 93       	push	r25
 2e4:	af 93       	push	r26
 2e6:	bf 93       	push	r27
    cli();
 2e8:	f8 94       	cli
    sleep_disable();
 2ea:	83 b7       	in	r24, 0x33	; 51
 2ec:	8e 7f       	andi	r24, 0xFE	; 254
 2ee:	83 bf       	out	0x33, r24	; 51
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2f0:	8f e7       	ldi	r24, 0x7F	; 127
 2f2:	98 e3       	ldi	r25, 0x38	; 56
 2f4:	a1 e0       	ldi	r26, 0x01	; 1
 2f6:	81 50       	subi	r24, 0x01	; 1
 2f8:	90 40       	sbci	r25, 0x00	; 0
 2fa:	a0 40       	sbci	r26, 0x00	; 0
 2fc:	e1 f7       	brne	.-8      	; 0x2f6 <__vector_4+0x20>
 2fe:	00 c0       	rjmp	.+0      	; 0x300 <__vector_4+0x2a>
 300:	00 00       	nop
    _delay_ms(50);
    if(PINC & (1<<HOOK)) { // picked up!
 302:	30 99       	sbic	0x06, 0	; 6
 304:	15 c0       	rjmp	.+42     	; 0x330 <__vector_4+0x5a>
        LED_OFF();
        TCCR0B |= (1<<CS00); // turn on dial tone
    }
    else { // hung up!
        TCCR0B &= ~(1<<CS00); // turn off dial tone
 306:	85 b5       	in	r24, 0x25	; 37
 308:	8e 7f       	andi	r24, 0xFE	; 254
 30a:	85 bd       	out	0x25, r24	; 37
        counter = 0; // clear out the dialed number
 30c:	10 92 59 01 	sts	0x0159, r1
 310:	10 92 58 01 	sts	0x0158, r1
        LED_ON();
 314:	45 98       	cbi	0x08, 5	; 8
    }
    sei();
 316:	78 94       	sei
    sleep_enable();
 318:	83 b7       	in	r24, 0x33	; 51
 31a:	81 60       	ori	r24, 0x01	; 1
 31c:	83 bf       	out	0x33, r24	; 51
}
 31e:	bf 91       	pop	r27
 320:	af 91       	pop	r26
 322:	9f 91       	pop	r25
 324:	8f 91       	pop	r24
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti
{
    cli();
    sleep_disable();
    _delay_ms(50);
    if(PINC & (1<<HOOK)) { // picked up!
        LED_OFF();
 330:	45 9a       	sbi	0x08, 5	; 8
        TCCR0B |= (1<<CS00); // turn on dial tone
 332:	85 b5       	in	r24, 0x25	; 37
 334:	81 60       	ori	r24, 0x01	; 1
 336:	85 bd       	out	0x25, r24	; 37
 338:	ee cf       	rjmp	.-36     	; 0x316 <__vector_4+0x40>

0000033a <__vector_5>:
    sei();
    sleep_enable();
}

ISR(PCINT2_vect) // ROTARY (or EROTARY)
{
 33a:	1f 92       	push	r1
 33c:	0f 92       	push	r0
 33e:	0f b6       	in	r0, 0x3f	; 63
 340:	0f 92       	push	r0
 342:	11 24       	eor	r1, r1
 344:	0f 93       	push	r16
 346:	1f 93       	push	r17
 348:	2f 93       	push	r18
 34a:	3f 93       	push	r19
 34c:	4f 93       	push	r20
 34e:	8f 93       	push	r24
 350:	9f 93       	push	r25
 352:	ef 93       	push	r30
 354:	ff 93       	push	r31
    cli();
 356:	f8 94       	cli
    if(PIND & (1<<ROTARY)){
 358:	4c 99       	sbic	0x09, 4	; 9
 35a:	74 c0       	rjmp	.+232    	; 0x444 <__vector_5+0x10a>
        rotary_high = 1;
        _delay_ms(20);
    }
    if ((PIND & (1<<ROTARY)) != (1 << ROTARY)){
 35c:	4c 9b       	sbis	0x09, 4	; 9
 35e:	58 c0       	rjmp	.+176    	; 0x410 <__vector_5+0xd6>
        if(rotary_high == 1){
            rotary_high = 0;
            dialed_number++;
        }
    }
    if (PIND & (1<<EROTARY)){
 360:	4b 9b       	sbis	0x09, 3	; 9
 362:	32 c0       	rjmp	.+100    	; 0x3c8 <__vector_5+0x8e>
        dialed_number--;
 364:	80 91 56 01 	lds	r24, 0x0156
 368:	90 91 57 01 	lds	r25, 0x0157
 36c:	01 97       	sbiw	r24, 0x01	; 1
 36e:	90 93 57 01 	sts	0x0157, r25
 372:	80 93 56 01 	sts	0x0156, r24
        if(counter < MAX_NUMBER_LENGTH){
 376:	20 91 58 01 	lds	r18, 0x0158
 37a:	30 91 59 01 	lds	r19, 0x0159
 37e:	24 31       	cpi	r18, 0x14	; 20
 380:	31 05       	cpc	r19, r1
 382:	dc f1       	brlt	.+118    	; 0x3fa <__vector_5+0xc0>
        phone_number[counter++] = dialed_number;
        }
        else {
            // error_ring();
        }
        for(char i = 0; i < dialed_number; i++){
 384:	18 16       	cp	r1, r24
 386:	19 06       	cpc	r1, r25
 388:	dc f4       	brge	.+54     	; 0x3c0 <__vector_5+0x86>
 38a:	40 e0       	ldi	r20, 0x00	; 0
            LED_ON();
 38c:	45 98       	cbi	0x08, 5	; 8
 38e:	0f ef       	ldi	r16, 0xFF	; 255
 390:	11 ee       	ldi	r17, 0xE1	; 225
 392:	24 e0       	ldi	r18, 0x04	; 4
 394:	01 50       	subi	r16, 0x01	; 1
 396:	10 40       	sbci	r17, 0x00	; 0
 398:	20 40       	sbci	r18, 0x00	; 0
 39a:	e1 f7       	brne	.-8      	; 0x394 <__vector_5+0x5a>
 39c:	00 c0       	rjmp	.+0      	; 0x39e <__vector_5+0x64>
 39e:	00 00       	nop
            _delay_ms(200);
            LED_OFF();
 3a0:	45 9a       	sbi	0x08, 5	; 8
 3a2:	0f ef       	ldi	r16, 0xFF	; 255
 3a4:	11 ee       	ldi	r17, 0xE1	; 225
 3a6:	24 e0       	ldi	r18, 0x04	; 4
 3a8:	01 50       	subi	r16, 0x01	; 1
 3aa:	10 40       	sbci	r17, 0x00	; 0
 3ac:	20 40       	sbci	r18, 0x00	; 0
 3ae:	e1 f7       	brne	.-8      	; 0x3a8 <__vector_5+0x6e>
 3b0:	00 c0       	rjmp	.+0      	; 0x3b2 <__vector_5+0x78>
 3b2:	00 00       	nop
        phone_number[counter++] = dialed_number;
        }
        else {
            // error_ring();
        }
        for(char i = 0; i < dialed_number; i++){
 3b4:	4f 5f       	subi	r20, 0xFF	; 255
 3b6:	24 2f       	mov	r18, r20
 3b8:	30 e0       	ldi	r19, 0x00	; 0
 3ba:	28 17       	cp	r18, r24
 3bc:	39 07       	cpc	r19, r25
 3be:	34 f3       	brlt	.-52     	; 0x38c <__vector_5+0x52>
            LED_ON();
            _delay_ms(200);
            LED_OFF();
            _delay_ms(200);
        }
        dialed_number = 0;
 3c0:	10 92 57 01 	sts	0x0157, r1
 3c4:	10 92 56 01 	sts	0x0156, r1
    }
    PCMSK2 &= ~((1<<PCINT19)|(1<<PCINT20));
 3c8:	80 91 6d 00 	lds	r24, 0x006D
 3cc:	87 7e       	andi	r24, 0xE7	; 231
 3ce:	80 93 6d 00 	sts	0x006D, r24
    sei();
 3d2:	78 94       	sei
    PCMSK2 |= (1<<PCINT19)|(1<<PCINT20);
 3d4:	80 91 6d 00 	lds	r24, 0x006D
 3d8:	88 61       	ori	r24, 0x18	; 24
 3da:	80 93 6d 00 	sts	0x006D, r24
}
 3de:	ff 91       	pop	r31
 3e0:	ef 91       	pop	r30
 3e2:	9f 91       	pop	r25
 3e4:	8f 91       	pop	r24
 3e6:	4f 91       	pop	r20
 3e8:	3f 91       	pop	r19
 3ea:	2f 91       	pop	r18
 3ec:	1f 91       	pop	r17
 3ee:	0f 91       	pop	r16
 3f0:	0f 90       	pop	r0
 3f2:	0f be       	out	0x3f, r0	; 63
 3f4:	0f 90       	pop	r0
 3f6:	1f 90       	pop	r1
 3f8:	18 95       	reti
        }
    }
    if (PIND & (1<<EROTARY)){
        dialed_number--;
        if(counter < MAX_NUMBER_LENGTH){
        phone_number[counter++] = dialed_number;
 3fa:	f9 01       	movw	r30, r18
 3fc:	e5 5a       	subi	r30, 0xA5	; 165
 3fe:	fe 4f       	sbci	r31, 0xFE	; 254
 400:	80 83       	st	Z, r24
 402:	2f 5f       	subi	r18, 0xFF	; 255
 404:	3f 4f       	sbci	r19, 0xFF	; 255
 406:	30 93 59 01 	sts	0x0159, r19
 40a:	20 93 58 01 	sts	0x0158, r18
 40e:	ba cf       	rjmp	.-140    	; 0x384 <__vector_5+0x4a>
 410:	8f e3       	ldi	r24, 0x3F	; 63
 412:	9c e9       	ldi	r25, 0x9C	; 156
 414:	01 97       	sbiw	r24, 0x01	; 1
 416:	f1 f7       	brne	.-4      	; 0x414 <__vector_5+0xda>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__vector_5+0xe0>
 41a:	00 00       	nop
        rotary_high = 1;
        _delay_ms(20);
    }
    if ((PIND & (1<<ROTARY)) != (1 << ROTARY)){
        _delay_ms(20);
        TCCR0B &= ~(1<<CS00); // turn off dial tone
 41c:	85 b5       	in	r24, 0x25	; 37
 41e:	8e 7f       	andi	r24, 0xFE	; 254
 420:	85 bd       	out	0x25, r24	; 37
        if(rotary_high == 1){
 422:	80 91 53 01 	lds	r24, 0x0153
 426:	81 30       	cpi	r24, 0x01	; 1
 428:	09 f0       	breq	.+2      	; 0x42c <__vector_5+0xf2>
 42a:	9a cf       	rjmp	.-204    	; 0x360 <__vector_5+0x26>
            rotary_high = 0;
 42c:	10 92 53 01 	sts	0x0153, r1
            dialed_number++;
 430:	80 91 56 01 	lds	r24, 0x0156
 434:	90 91 57 01 	lds	r25, 0x0157
 438:	01 96       	adiw	r24, 0x01	; 1
 43a:	90 93 57 01 	sts	0x0157, r25
 43e:	80 93 56 01 	sts	0x0156, r24
 442:	8e cf       	rjmp	.-228    	; 0x360 <__vector_5+0x26>

ISR(PCINT2_vect) // ROTARY (or EROTARY)
{
    cli();
    if(PIND & (1<<ROTARY)){
        rotary_high = 1;
 444:	81 e0       	ldi	r24, 0x01	; 1
 446:	80 93 53 01 	sts	0x0153, r24
 44a:	8f e3       	ldi	r24, 0x3F	; 63
 44c:	9c e9       	ldi	r25, 0x9C	; 156
 44e:	01 97       	sbiw	r24, 0x01	; 1
 450:	f1 f7       	brne	.-4      	; 0x44e <__vector_5+0x114>
 452:	00 c0       	rjmp	.+0      	; 0x454 <__vector_5+0x11a>
 454:	00 00       	nop
 456:	82 cf       	rjmp	.-252    	; 0x35c <__vector_5+0x22>

00000458 <ioinit>:
//Inputs:	None
//Outputs:	None
void ioinit(void)
{
    //1 = output, 0 = input
	DDRB = (1<<CS) | (1<<SCK) | (1<<MOSI);										//Define Port B GPIO Outputs
 458:	8c e2       	ldi	r24, 0x2C	; 44
 45a:	84 b9       	out	0x04, r24	; 4
    PORTB = (1<<MISO);
 45c:	80 e1       	ldi	r24, 0x10	; 16
 45e:	85 b9       	out	0x05, r24	; 5
	DDRB &= ~(1<<MISO);
 460:	24 98       	cbi	0x04, 4	; 4
    
	DDRC = (1<<BT_EN) | (1<<RING_PWR) | (1<<RING1) | (1<<RING2) |  (1<<PSTAT); 	//Define Port C Outputs
 462:	8e e3       	ldi	r24, 0x3E	; 62
 464:	87 b9       	out	0x07, r24	; 7
	PORTC = (1<<HOOK);
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	88 b9       	out	0x08, r24	; 8
	DDRC &= ~(1<<HOOK);															//Define Port C Inputs
 46a:	38 98       	cbi	0x07, 0	; 7
    
	DDRD = (1<<DT1) | (1<<DT2) | (1<< BT_RES);										//Define Port D Outputs
 46c:	84 ec       	ldi	r24, 0xC4	; 196
 46e:	8a b9       	out	0x0a, r24	; 10
	PORTD = (1<<ROTARY) | (1<<EROTARY);	
 470:	88 e1       	ldi	r24, 0x18	; 24
 472:	8b b9       	out	0x0b, r24	; 11
    DDRD &= ~((1<<ROTARY)|(1<<EROTARY));								//Define Port D inputs
 474:	8a b1       	in	r24, 0x0a	; 10
 476:	87 7e       	andi	r24, 0xE7	; 231
 478:	8a b9       	out	0x0a, r24	; 10
    
    //SPI Bus setup
	//SPCR = (1<<SPE)|(1<<MSTR)|(1<<CPHA)|(1<<CPOL)|(1<<SPR0);	//Might need to change the phase

    uart_init(BAUD_RATE);
 47a:	80 e0       	ldi	r24, 0x00	; 0
 47c:	91 ee       	ldi	r25, 0xE1	; 225
 47e:	0e 94 e9 02 	call	0x5d2	; 0x5d2 <uart_init>
    
    cli();
 482:	f8 94       	cli
    
    
	//Init timer for dial tone
    ASSR = 0;
 484:	10 92 b6 00 	sts	0x00B6, r1
    TCCR2A=(1<<WGM21)|(1<<WGM20);
 488:	83 e0       	ldi	r24, 0x03	; 3
 48a:	80 93 b0 00 	sts	0x00B0, r24
    //    TCCR0B=(1<<CS00); // this turns on the timer now!
    TIMSK2 = (1<<OCIE2A)|(1<<TOIE2)|(1<<OCIE2B);
 48e:	87 e0       	ldi	r24, 0x07	; 7
 490:	80 93 70 00 	sts	0x0070, r24
	OCR2A=(0x00);		//Load Compare Register with Delay
 494:	10 92 b3 00 	sts	0x00B3, r1
    OCR2B=(0x00);
 498:	10 92 b4 00 	sts	0x00B4, r1
    PCICR |= (1<<PCIE0)|(1<<PCIE1)|(1<<PCIE2);
 49c:	e8 e6       	ldi	r30, 0x68	; 104
 49e:	f0 e0       	ldi	r31, 0x00	; 0
 4a0:	80 81       	ld	r24, Z
 4a2:	87 60       	ori	r24, 0x07	; 7
 4a4:	80 83       	st	Z, r24
    PCMSK1 |= (1<<PCINT8);
 4a6:	ec e6       	ldi	r30, 0x6C	; 108
 4a8:	f0 e0       	ldi	r31, 0x00	; 0
 4aa:	80 81       	ld	r24, Z
 4ac:	81 60       	ori	r24, 0x01	; 1
 4ae:	80 83       	st	Z, r24
    PCMSK2 |= (1<<PCINT19)|(1<<PCINT20);
 4b0:	ed e6       	ldi	r30, 0x6D	; 109
 4b2:	f0 e0       	ldi	r31, 0x00	; 0
 4b4:	80 81       	ld	r24, Z
 4b6:	88 61       	ori	r24, 0x18	; 24
 4b8:	80 83       	st	Z, r24
}
 4ba:	08 95       	ret

000004bc <interpret_message>:

void interpret_message(char *message)
{
 4bc:	0f 93       	push	r16
 4be:	1f 93       	push	r17
 4c0:	cf 93       	push	r28
 4c2:	df 93       	push	r29
 4c4:	cd b7       	in	r28, 0x3d	; 61
 4c6:	de b7       	in	r29, 0x3e	; 62
 4c8:	c0 50       	subi	r28, 0x00	; 0
 4ca:	d1 40       	sbci	r29, 0x01	; 1
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	f8 94       	cli
 4d0:	de bf       	out	0x3e, r29	; 62
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	cd bf       	out	0x3d, r28	; 61
	char words[8][32];
	char *p = strtok(message, " ");
 4d6:	60 e0       	ldi	r22, 0x00	; 0
 4d8:	71 e0       	ldi	r23, 0x01	; 1
 4da:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <strtok>
 4de:	bc 01       	movw	r22, r24
	unsigned short i=0;
	while (*p)
 4e0:	fc 01       	movw	r30, r24
 4e2:	80 81       	ld	r24, Z
 4e4:	88 23       	and	r24, r24
 4e6:	99 f0       	breq	.+38     	; 0x50e <interpret_message+0x52>
 4e8:	8e 01       	movw	r16, r28
 4ea:	0f 5f       	subi	r16, 0xFF	; 255
 4ec:	1f 4f       	sbci	r17, 0xFF	; 255
	{
		strcpy(words[i++], p);
 4ee:	c8 01       	movw	r24, r16
 4f0:	0e 94 f5 03 	call	0x7ea	; 0x7ea <strcpy>
		p = strtok(NULL, " ");
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	71 e0       	ldi	r23, 0x01	; 1
 4fc:	0e 94 f0 03 	call	0x7e0	; 0x7e0 <strtok>
 500:	bc 01       	movw	r22, r24
 502:	00 5e       	subi	r16, 0xE0	; 224
 504:	1f 4f       	sbci	r17, 0xFF	; 255
void interpret_message(char *message)
{
	char words[8][32];
	char *p = strtok(message, " ");
	unsigned short i=0;
	while (*p)
 506:	fc 01       	movw	r30, r24
 508:	80 81       	ld	r24, Z
 50a:	88 23       	and	r24, r24
 50c:	81 f7       	brne	.-32     	; 0x4ee <interpret_message+0x32>
	}
	if(strcmp(words[0], "SCO") == 0)
	{
		
	}
}
 50e:	c0 50       	subi	r28, 0x00	; 0
 510:	df 4f       	sbci	r29, 0xFF	; 255
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	f8 94       	cli
 516:	de bf       	out	0x3e, r29	; 62
 518:	0f be       	out	0x3f, r0	; 63
 51a:	cd bf       	out	0x3d, r28	; 61
 51c:	df 91       	pop	r29
 51e:	cf 91       	pop	r28
 520:	1f 91       	pop	r17
 522:	0f 91       	pop	r16
 524:	08 95       	ret

00000526 <__vector_18>:
ISR(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
 526:	1f 92       	push	r1
 528:	0f 92       	push	r0
 52a:	0f b6       	in	r0, 0x3f	; 63
 52c:	0f 92       	push	r0
 52e:	11 24       	eor	r1, r1
 530:	2f 93       	push	r18
 532:	8f 93       	push	r24
 534:	9f 93       	push	r25
 536:	ef 93       	push	r30
 538:	ff 93       	push	r31
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
 53a:	20 91 c0 00 	lds	r18, 0x00C0
    data = UART0_DATA;
 53e:	90 91 c6 00 	lds	r25, 0x00C6
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
 542:	e0 91 0e 01 	lds	r30, 0x010E
 546:	ef 5f       	subi	r30, 0xFF	; 255
 548:	ef 71       	andi	r30, 0x1F	; 31
    
    if ( tmphead == UART_RxTail ) {
 54a:	80 91 0d 01 	lds	r24, 0x010D
 54e:	e8 17       	cp	r30, r24
 550:	a1 f0       	breq	.+40     	; 0x57a <__vector_18+0x54>
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
 552:	82 2f       	mov	r24, r18
 554:	88 71       	andi	r24, 0x18	; 24
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    }else{
        /* store new index */
        UART_RxHead = tmphead;
 556:	e0 93 0e 01 	sts	0x010E, r30
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
 55a:	f0 e0       	ldi	r31, 0x00	; 0
 55c:	ef 5e       	subi	r30, 0xEF	; 239
 55e:	fe 4f       	sbci	r31, 0xFE	; 254
 560:	90 83       	st	Z, r25
    }
    UART_LastRxError = lastRxError;   
 562:	80 93 0c 01 	sts	0x010C, r24
}
 566:	ff 91       	pop	r31
 568:	ef 91       	pop	r30
 56a:	9f 91       	pop	r25
 56c:	8f 91       	pop	r24
 56e:	2f 91       	pop	r18
 570:	0f 90       	pop	r0
 572:	0f be       	out	0x3f, r0	; 63
 574:	0f 90       	pop	r0
 576:	1f 90       	pop	r1
 578:	18 95       	reti
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    
    if ( tmphead == UART_RxTail ) {
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
 57a:	82 e0       	ldi	r24, 0x02	; 2
 57c:	f2 cf       	rjmp	.-28     	; 0x562 <__vector_18+0x3c>

0000057e <__vector_19>:
ISR(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
 57e:	1f 92       	push	r1
 580:	0f 92       	push	r0
 582:	0f b6       	in	r0, 0x3f	; 63
 584:	0f 92       	push	r0
 586:	11 24       	eor	r1, r1
 588:	8f 93       	push	r24
 58a:	9f 93       	push	r25
 58c:	ef 93       	push	r30
 58e:	ff 93       	push	r31
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
 590:	90 91 10 01 	lds	r25, 0x0110
 594:	80 91 0f 01 	lds	r24, 0x010F
 598:	98 17       	cp	r25, r24
 59a:	a9 f0       	breq	.+42     	; 0x5c6 <__vector_19+0x48>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
 59c:	e0 91 0f 01 	lds	r30, 0x010F
 5a0:	ef 5f       	subi	r30, 0xFF	; 255
 5a2:	ef 71       	andi	r30, 0x1F	; 31
        UART_TxTail = tmptail;
 5a4:	e0 93 0f 01 	sts	0x010F, r30
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
 5a8:	f0 e0       	ldi	r31, 0x00	; 0
 5aa:	ef 5c       	subi	r30, 0xCF	; 207
 5ac:	fe 4f       	sbci	r31, 0xFE	; 254
 5ae:	80 81       	ld	r24, Z
 5b0:	80 93 c6 00 	sts	0x00C6, r24
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    }
}
 5b4:	ff 91       	pop	r31
 5b6:	ef 91       	pop	r30
 5b8:	9f 91       	pop	r25
 5ba:	8f 91       	pop	r24
 5bc:	0f 90       	pop	r0
 5be:	0f be       	out	0x3f, r0	; 63
 5c0:	0f 90       	pop	r0
 5c2:	1f 90       	pop	r1
 5c4:	18 95       	reti
        UART_TxTail = tmptail;
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
 5c6:	80 91 c1 00 	lds	r24, 0x00C1
 5ca:	8f 7d       	andi	r24, 0xDF	; 223
 5cc:	80 93 c1 00 	sts	0x00C1, r24
 5d0:	f1 cf       	rjmp	.-30     	; 0x5b4 <__vector_19+0x36>

000005d2 <uart_init>:
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    UART_TxHead = 0;
 5d2:	10 92 10 01 	sts	0x0110, r1
    UART_TxTail = 0;
 5d6:	10 92 0f 01 	sts	0x010F, r1
    UART_RxHead = 0;
 5da:	10 92 0e 01 	sts	0x010E, r1
    UART_RxTail = 0;
 5de:	10 92 0d 01 	sts	0x010D, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
 5e2:	97 ff       	sbrs	r25, 7
 5e4:	04 c0       	rjmp	.+8      	; 0x5ee <uart_init+0x1c>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
 5e6:	22 e0       	ldi	r18, 0x02	; 2
 5e8:	20 93 c0 00 	sts	0x00C0, r18
   		baudrate &= ~0x8000;
 5ec:	9f 77       	andi	r25, 0x7F	; 127
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
 5ee:	90 93 c5 00 	sts	0x00C5, r25
    UBRR0L = (unsigned char) baudrate;
 5f2:	80 93 c4 00 	sts	0x00C4, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 5f6:	88 e9       	ldi	r24, 0x98	; 152
 5f8:	80 93 c1 00 	sts	0x00C1, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
 5fc:	86 e0       	ldi	r24, 0x06	; 6
 5fe:	80 93 c2 00 	sts	0x00C2, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
 602:	08 95       	ret

00000604 <uart_getc>:
{    
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
 604:	90 91 0e 01 	lds	r25, 0x010E
 608:	80 91 0d 01 	lds	r24, 0x010D
 60c:	98 17       	cp	r25, r24
 60e:	89 f0       	breq	.+34     	; 0x632 <uart_getc+0x2e>
        return UART_NO_DATA;   /* no data available */
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
 610:	e0 91 0d 01 	lds	r30, 0x010D
 614:	ef 5f       	subi	r30, 0xFF	; 255
 616:	ef 71       	andi	r30, 0x1F	; 31
    UART_RxTail = tmptail; 
 618:	e0 93 0d 01 	sts	0x010D, r30
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
 61c:	f0 e0       	ldi	r31, 0x00	; 0
 61e:	ef 5e       	subi	r30, 0xEF	; 239
 620:	fe 4f       	sbci	r31, 0xFE	; 254
 622:	20 81       	ld	r18, Z
    
    return (UART_LastRxError << 8) + data;
 624:	30 91 0c 01 	lds	r19, 0x010C
 628:	93 2f       	mov	r25, r19
 62a:	80 e0       	ldi	r24, 0x00	; 0
 62c:	82 0f       	add	r24, r18
 62e:	91 1d       	adc	r25, r1
 630:	08 95       	ret
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
        return UART_NO_DATA;   /* no data available */
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	91 e0       	ldi	r25, 0x01	; 1
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    
    return (UART_LastRxError << 8) + data;

}/* uart_getc */
 636:	08 95       	ret

00000638 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 638:	20 91 10 01 	lds	r18, 0x0110
 63c:	2f 5f       	subi	r18, 0xFF	; 255
 63e:	2f 71       	andi	r18, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 640:	90 91 0f 01 	lds	r25, 0x010F
 644:	29 17       	cp	r18, r25
 646:	e1 f3       	breq	.-8      	; 0x640 <uart_putc+0x8>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 648:	e2 2f       	mov	r30, r18
 64a:	f0 e0       	ldi	r31, 0x00	; 0
 64c:	ef 5c       	subi	r30, 0xCF	; 207
 64e:	fe 4f       	sbci	r31, 0xFE	; 254
 650:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
 652:	20 93 10 01 	sts	0x0110, r18

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 656:	80 91 c1 00 	lds	r24, 0x00C1
 65a:	80 62       	ori	r24, 0x20	; 32
 65c:	80 93 c1 00 	sts	0x00C1, r24

}/* uart_putc */
 660:	08 95       	ret

00000662 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
 662:	dc 01       	movw	r26, r24
    while (*s) 
 664:	2c 91       	ld	r18, X
 666:	22 23       	and	r18, r18
 668:	c1 f0       	breq	.+48     	; 0x69a <uart_puts+0x38>
Function: uart_puts()
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
 66a:	11 96       	adiw	r26, 0x01	; 1
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 66c:	90 91 10 01 	lds	r25, 0x0110
 670:	9f 5f       	subi	r25, 0xFF	; 255
 672:	9f 71       	andi	r25, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 674:	80 91 0f 01 	lds	r24, 0x010F
 678:	98 17       	cp	r25, r24
 67a:	e1 f3       	breq	.-8      	; 0x674 <uart_puts+0x12>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 67c:	e9 2f       	mov	r30, r25
 67e:	f0 e0       	ldi	r31, 0x00	; 0
 680:	ef 5c       	subi	r30, 0xCF	; 207
 682:	fe 4f       	sbci	r31, 0xFE	; 254
 684:	20 83       	st	Z, r18
    UART_TxHead = tmphead;
 686:	90 93 10 01 	sts	0x0110, r25

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 68a:	80 91 c1 00 	lds	r24, 0x00C1
 68e:	80 62       	ori	r24, 0x20	; 32
 690:	80 93 c1 00 	sts	0x00C1, r24
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
 694:	2d 91       	ld	r18, X+
 696:	22 23       	and	r18, r18
 698:	49 f7       	brne	.-46     	; 0x66c <uart_puts+0xa>
 69a:	08 95       	ret

0000069c <uart_puts_p>:
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 69c:	fc 01       	movw	r30, r24
 69e:	44 91       	lpm	r20, Z
 6a0:	44 23       	and	r20, r20
 6a2:	d1 f0       	breq	.+52     	; 0x6d8 <uart_puts_p+0x3c>
 6a4:	01 96       	adiw	r24, 0x01	; 1
void uart_putc(unsigned char data)
{
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
 6a6:	30 91 10 01 	lds	r19, 0x0110
 6aa:	3f 5f       	subi	r19, 0xFF	; 255
 6ac:	3f 71       	andi	r19, 0x1F	; 31
    
    while ( tmphead == UART_TxTail ){
 6ae:	20 91 0f 01 	lds	r18, 0x010F
 6b2:	32 17       	cp	r19, r18
 6b4:	e1 f3       	breq	.-8      	; 0x6ae <uart_puts_p+0x12>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
 6b6:	a3 2f       	mov	r26, r19
 6b8:	b0 e0       	ldi	r27, 0x00	; 0
 6ba:	af 5c       	subi	r26, 0xCF	; 207
 6bc:	be 4f       	sbci	r27, 0xFE	; 254
 6be:	4c 93       	st	X, r20
    UART_TxHead = tmphead;
 6c0:	30 93 10 01 	sts	0x0110, r19

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
 6c4:	20 91 c1 00 	lds	r18, 0x00C1
 6c8:	20 62       	ori	r18, 0x20	; 32
 6ca:	20 93 c1 00 	sts	0x00C1, r18
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
 6ce:	fc 01       	movw	r30, r24
 6d0:	01 96       	adiw	r24, 0x01	; 1
 6d2:	44 91       	lpm	r20, Z
 6d4:	44 23       	and	r20, r20
 6d6:	39 f7       	brne	.-50     	; 0x6a6 <uart_puts_p+0xa>
 6d8:	08 95       	ret

000006da <uart_available>:
Input:    None
Returns:  Integer number of bytes in the receive buffer
**************************************************************************/
int uart_available(void)
{
        return (UART_RX_BUFFER_MASK + UART_RxHead - UART_RxTail) % UART_RX_BUFFER_MASK;
 6da:	80 91 0e 01 	lds	r24, 0x010E
 6de:	20 91 0d 01 	lds	r18, 0x010D
 6e2:	90 e0       	ldi	r25, 0x00	; 0
 6e4:	4f 96       	adiw	r24, 0x1f	; 31
 6e6:	82 1b       	sub	r24, r18
 6e8:	91 09       	sbc	r25, r1
 6ea:	6f e1       	ldi	r22, 0x1F	; 31
 6ec:	70 e0       	ldi	r23, 0x00	; 0
 6ee:	0e 94 c9 03 	call	0x792	; 0x792 <__divmodhi4>
}/* uart_available */
 6f2:	08 95       	ret

000006f4 <uart_flush>:
Input:    None
Returns:  None
**************************************************************************/
void uart_flush(void)
{
        UART_RxHead = UART_RxTail;
 6f4:	80 91 0d 01 	lds	r24, 0x010D
 6f8:	80 93 0e 01 	sts	0x010E, r24
}/* uart_flush */
 6fc:	08 95       	ret

000006fe <main>:

int main(void){
 6fe:	cf 93       	push	r28
 700:	df 93       	push	r29
 702:	cd b7       	in	r28, 0x3d	; 61
 704:	de b7       	in	r29, 0x3e	; 62
 706:	c0 58       	subi	r28, 0x80	; 128
 708:	d0 40       	sbci	r29, 0x00	; 0
 70a:	0f b6       	in	r0, 0x3f	; 63
 70c:	f8 94       	cli
 70e:	de bf       	out	0x3e, r29	; 62
 710:	0f be       	out	0x3f, r0	; 63
 712:	cd bf       	out	0x3d, r28	; 61
    char message[MAX_MESSAGE_LENGTH];	//Buffer for UART messages
    int uart_recv;
    char uart_err;
    char uart_char;
    ioinit();
 714:	0e 94 2c 02 	call	0x458	; 0x458 <ioinit>
    sleep_enable();
 718:	83 b7       	in	r24, 0x33	; 51
 71a:	81 60       	ori	r24, 0x01	; 1
 71c:	83 bf       	out	0x33, r24	; 51
    set_sleep_mode(SLEEP_MODE_IDLE);
 71e:	83 b7       	in	r24, 0x33	; 51
 720:	81 7f       	andi	r24, 0xF1	; 241
 722:	83 bf       	out	0x33, r24	; 51
    sei();
 724:	78 94       	sei
    message_index = 0;
 726:	10 92 0b 01 	sts	0x010B, r1
 72a:	10 92 0a 01 	sts	0x010A, r1
 72e:	01 c0       	rjmp	.+2      	; 0x732 <main+0x34>
        {
            message[message_index-1]='\0';
            message_index = 0;
            interpret_message(message);
        } 
        sleep_cpu(); // we wake up when we receive a character, right?
 730:	88 95       	sleep
    sleep_enable();
    set_sleep_mode(SLEEP_MODE_IDLE);
    sei();
    message_index = 0;
    while(1){
        uart_recv = uart_getc();
 732:	0e 94 02 03 	call	0x604	; 0x604 <uart_getc>
        uart_err = (uart_recv & 0xff00) >> 8;
        uart_char = uart_recv & 0x00ff;
        if(!(uart_err) && message_index < MAX_MESSAGE_LENGTH && uart_char != '\r')
 736:	99 23       	and	r25, r25
 738:	d1 f4       	brne	.+52     	; 0x76e <main+0x70>
 73a:	20 91 0a 01 	lds	r18, 0x010A
 73e:	30 91 0b 01 	lds	r19, 0x010B
 742:	20 38       	cpi	r18, 0x80	; 128
 744:	31 05       	cpc	r19, r1
 746:	9c f4       	brge	.+38     	; 0x76e <main+0x70>
 748:	8d 30       	cpi	r24, 0x0D	; 13
 74a:	91 f3       	breq	.-28     	; 0x730 <main+0x32>
        {
            message[message_index++] = uart_char;
 74c:	20 91 0a 01 	lds	r18, 0x010A
 750:	30 91 0b 01 	lds	r19, 0x010B
 754:	e1 e0       	ldi	r30, 0x01	; 1
 756:	f0 e0       	ldi	r31, 0x00	; 0
 758:	ec 0f       	add	r30, r28
 75a:	fd 1f       	adc	r31, r29
 75c:	e2 0f       	add	r30, r18
 75e:	f3 1f       	adc	r31, r19
 760:	80 83       	st	Z, r24
 762:	2f 5f       	subi	r18, 0xFF	; 255
 764:	3f 4f       	sbci	r19, 0xFF	; 255
 766:	30 93 0b 01 	sts	0x010B, r19
 76a:	20 93 0a 01 	sts	0x010A, r18
        }
        if(uart_char == '\n')
 76e:	8a 30       	cpi	r24, 0x0A	; 10
 770:	f9 f6       	brne	.-66     	; 0x730 <main+0x32>
        {
            message[message_index-1]='\0';
 772:	e0 91 0a 01 	lds	r30, 0x010A
 776:	f0 91 0b 01 	lds	r31, 0x010B
 77a:	ec 0f       	add	r30, r28
 77c:	fd 1f       	adc	r31, r29
 77e:	10 82       	st	Z, r1
            message_index = 0;
 780:	10 92 0b 01 	sts	0x010B, r1
 784:	10 92 0a 01 	sts	0x010A, r1
            interpret_message(message);
 788:	ce 01       	movw	r24, r28
 78a:	01 96       	adiw	r24, 0x01	; 1
 78c:	0e 94 5e 02 	call	0x4bc	; 0x4bc <interpret_message>
 790:	cf cf       	rjmp	.-98     	; 0x730 <main+0x32>

00000792 <__divmodhi4>:
 792:	97 fb       	bst	r25, 7
 794:	09 2e       	mov	r0, r25
 796:	07 26       	eor	r0, r23
 798:	0a d0       	rcall	.+20     	; 0x7ae <__divmodhi4_neg1>
 79a:	77 fd       	sbrc	r23, 7
 79c:	04 d0       	rcall	.+8      	; 0x7a6 <__divmodhi4_neg2>
 79e:	0c d0       	rcall	.+24     	; 0x7b8 <__udivmodhi4>
 7a0:	06 d0       	rcall	.+12     	; 0x7ae <__divmodhi4_neg1>
 7a2:	00 20       	and	r0, r0
 7a4:	1a f4       	brpl	.+6      	; 0x7ac <__divmodhi4_exit>

000007a6 <__divmodhi4_neg2>:
 7a6:	70 95       	com	r23
 7a8:	61 95       	neg	r22
 7aa:	7f 4f       	sbci	r23, 0xFF	; 255

000007ac <__divmodhi4_exit>:
 7ac:	08 95       	ret

000007ae <__divmodhi4_neg1>:
 7ae:	f6 f7       	brtc	.-4      	; 0x7ac <__divmodhi4_exit>
 7b0:	90 95       	com	r25
 7b2:	81 95       	neg	r24
 7b4:	9f 4f       	sbci	r25, 0xFF	; 255
 7b6:	08 95       	ret

000007b8 <__udivmodhi4>:
 7b8:	aa 1b       	sub	r26, r26
 7ba:	bb 1b       	sub	r27, r27
 7bc:	51 e1       	ldi	r21, 0x11	; 17
 7be:	07 c0       	rjmp	.+14     	; 0x7ce <__udivmodhi4_ep>

000007c0 <__udivmodhi4_loop>:
 7c0:	aa 1f       	adc	r26, r26
 7c2:	bb 1f       	adc	r27, r27
 7c4:	a6 17       	cp	r26, r22
 7c6:	b7 07       	cpc	r27, r23
 7c8:	10 f0       	brcs	.+4      	; 0x7ce <__udivmodhi4_ep>
 7ca:	a6 1b       	sub	r26, r22
 7cc:	b7 0b       	sbc	r27, r23

000007ce <__udivmodhi4_ep>:
 7ce:	88 1f       	adc	r24, r24
 7d0:	99 1f       	adc	r25, r25
 7d2:	5a 95       	dec	r21
 7d4:	a9 f7       	brne	.-22     	; 0x7c0 <__udivmodhi4_loop>
 7d6:	80 95       	com	r24
 7d8:	90 95       	com	r25
 7da:	bc 01       	movw	r22, r24
 7dc:	cd 01       	movw	r24, r26
 7de:	08 95       	ret

000007e0 <strtok>:
 7e0:	41 e5       	ldi	r20, 0x51	; 81
 7e2:	51 e0       	ldi	r21, 0x01	; 1
 7e4:	0e 94 fc 03 	call	0x7f8	; 0x7f8 <strtok_r>
 7e8:	08 95       	ret

000007ea <strcpy>:
 7ea:	fb 01       	movw	r30, r22
 7ec:	dc 01       	movw	r26, r24
 7ee:	01 90       	ld	r0, Z+
 7f0:	0d 92       	st	X+, r0
 7f2:	00 20       	and	r0, r0
 7f4:	e1 f7       	brne	.-8      	; 0x7ee <strcpy+0x4>
 7f6:	08 95       	ret

000007f8 <strtok_r>:
 7f8:	fa 01       	movw	r30, r20
 7fa:	a1 91       	ld	r26, Z+
 7fc:	b0 81       	ld	r27, Z
 7fe:	00 97       	sbiw	r24, 0x00	; 0
 800:	19 f4       	brne	.+6      	; 0x808 <strtok_r+0x10>
 802:	10 97       	sbiw	r26, 0x00	; 0
 804:	e1 f0       	breq	.+56     	; 0x83e <strtok_r+0x46>
 806:	cd 01       	movw	r24, r26
 808:	dc 01       	movw	r26, r24
 80a:	cd 01       	movw	r24, r26
 80c:	0d 90       	ld	r0, X+
 80e:	00 20       	and	r0, r0
 810:	11 f4       	brne	.+4      	; 0x816 <strtok_r+0x1e>
 812:	c0 01       	movw	r24, r0
 814:	13 c0       	rjmp	.+38     	; 0x83c <strtok_r+0x44>
 816:	fb 01       	movw	r30, r22
 818:	21 91       	ld	r18, Z+
 81a:	22 23       	and	r18, r18
 81c:	19 f0       	breq	.+6      	; 0x824 <strtok_r+0x2c>
 81e:	20 15       	cp	r18, r0
 820:	d9 f7       	brne	.-10     	; 0x818 <strtok_r+0x20>
 822:	f3 cf       	rjmp	.-26     	; 0x80a <strtok_r+0x12>
 824:	fb 01       	movw	r30, r22
 826:	21 91       	ld	r18, Z+
 828:	20 15       	cp	r18, r0
 82a:	19 f4       	brne	.+6      	; 0x832 <strtok_r+0x3a>
 82c:	1e 92       	st	-X, r1
 82e:	11 96       	adiw	r26, 0x01	; 1
 830:	06 c0       	rjmp	.+12     	; 0x83e <strtok_r+0x46>
 832:	22 23       	and	r18, r18
 834:	c1 f7       	brne	.-16     	; 0x826 <strtok_r+0x2e>
 836:	0d 90       	ld	r0, X+
 838:	00 20       	and	r0, r0
 83a:	a1 f7       	brne	.-24     	; 0x824 <strtok_r+0x2c>
 83c:	d0 01       	movw	r26, r0
 83e:	fa 01       	movw	r30, r20
 840:	a1 93       	st	Z+, r26
 842:	b0 83       	st	Z, r27
 844:	08 95       	ret

00000846 <_exit>:
 846:	f8 94       	cli

00000848 <__stop_program>:
 848:	ff cf       	rjmp	.-2      	; 0x848 <__stop_program>
